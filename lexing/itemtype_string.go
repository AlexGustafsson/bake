// Code generated by "stringer -type=ItemType"; DO NOT EDIT.

package lexing

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ItemStartOfInput-0]
	_ = x[ItemEndOfInput-1]
	_ = x[ItemError-2]
	_ = x[ItemAddition-3]
	_ = x[ItemSubtraction-4]
	_ = x[ItemMultiplication-5]
	_ = x[ItemDivision-6]
	_ = x[ItemEqualEqual-7]
	_ = x[ItemNotEqual-8]
	_ = x[ItemSpread-9]
	_ = x[ItemLeftParentheses-10]
	_ = x[ItemRightParentheses-11]
	_ = x[ItemLeftBracket-12]
	_ = x[ItemRightBracket-13]
	_ = x[ItemLeftCurly-14]
	_ = x[ItemRightCurly-15]
	_ = x[ItemColon-16]
	_ = x[ItemComma-17]
	_ = x[ItemDot-18]
	_ = x[ItemDollar-19]
	_ = x[ItemKeywordPackage-20]
	_ = x[ItemKeywordImport-21]
	_ = x[ItemKeywordFunc-22]
	_ = x[ItemKeywordRule-23]
	_ = x[ItemKeywordExport-24]
	_ = x[ItemKeywordReturn-25]
	_ = x[ItemIdentifier-26]
	_ = x[ItemNewline-27]
	_ = x[ItemWhitespace-28]
	_ = x[ItemLetter-29]
	_ = x[ItemUnicodeCharacter-30]
	_ = x[ItemDecimalDigit-31]
	_ = x[ItemRawString-32]
	_ = x[ItemComment-33]
}

const _ItemType_name = "ItemStartOfInputItemEndOfInputItemErrorItemAdditionItemSubtractionItemMultiplicationItemDivisionItemEqualEqualItemNotEqualItemSpreadItemLeftParenthesesItemRightParenthesesItemLeftBracketItemRightBracketItemLeftCurlyItemRightCurlyItemColonItemCommaItemDotItemDollarItemKeywordPackageItemKeywordImportItemKeywordFuncItemKeywordRuleItemKeywordExportItemKeywordReturnItemIdentifierItemNewlineItemWhitespaceItemLetterItemUnicodeCharacterItemDecimalDigitItemRawStringItemComment"

var _ItemType_index = [...]uint16{0, 16, 30, 39, 51, 66, 84, 96, 110, 122, 132, 151, 171, 186, 202, 215, 229, 238, 247, 254, 264, 282, 299, 314, 329, 346, 363, 377, 388, 402, 412, 432, 448, 461, 472}

func (i ItemType) String() string {
	if i < 0 || i >= ItemType(len(_ItemType_index)-1) {
		return "ItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ItemType_name[_ItemType_index[i]:_ItemType_index[i+1]]
}
