#################################################################
## Iro
################################################################
##
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
##
################################################################

name = Bake
file_extensions [] = bke;

styles [] {
   .comment : style {
      color = grey
      italic = true
      textmate_scope = comment
      pygments_scope = Comment
   }

   .keyword : style {
      color = cyan
      textmate_scope = keyword
      pygments_scope = Keyword
   }

   .numeric : style {
      color = gold
      textmate_scope = constant.numeric
      pygments_scope = Number
   }

   .punctuation : style {
      color = red_2
      textmate_scope = punctuation
      pygments_scope = Punctuation
   }

   .text : style {
      color = light_green
      textmate_scope = text
      pygments_scope = String
   }

   .illegal : style {
      color = white
      background_color = red
      textmate_scope = invalid
      pygments_scope = Generic.Error
   }

   .import : style {
      color = purple
      textmate_scope = keyword.control.import
      pygments_scope = Name.Namespace
   }

   .function_name : style {
      color = cyan
      textmate_scope = entity.name.function
      pygments_scope = Name.Function
   }

   .whitespace : style {
      # NOOP
   }

   .variable : style {
      color = gold
      textmate_scope = variable
      pygments_scope = Name.Variable
   }
}

contexts [] {
   main : context {
      : include "comment" ;

      : include "import" ;

      : include "function_declaration" ;

      : include "rule_declaration" ;

      : include "hook" ;

      : include "rule" ;

      : include "illegal" ;
   }

   body : context {
      : pattern {
         regex \= (^[ \t]+)
         styles []= .whitespace;
      }
      : include "comment" ;
      : include "shell" ;
      : include "function_call" ;
      : include "illegal" ;
   }

   import : context {
      : inline_push {
         regex          \= (import)([ \t]*)(\()
         styles []       = .import, .whitespace, .punctuation;
         : pop {
            regex       \= (\))
            styles []    = .punctuation;
         }
         : include "string" ;
         : include "comment" ;
         : include "illegal" ;
      }
      : inline_push {
         regex          \= (import)([ \t]*)(\")
         styles []       = .import, .whitespace, .punctuation;
         default_style   = .text
         : pop {
            regex       \= (\")
            styles []    = .punctuation;
         }
      }
   }

   rule: context {
      : include "file_list";
      : inline_push {
         regex \= (\{)
         styles [] = .punctuation;
         : pop {
            regex \= (\})
            styles [] = .punctuation;
         }
         : include "body";
      }
      : inline_push {
         regex \= (:)
         styles [] = .punctuation;
         : eol_pop {}
         : pattern {
            regex \= ([a-zA-Z0-9_]+)
            styles [] = .keyword;
         }
         : inline_push {
            regex \= (\()
            styles [] = .punctuation;
            : pop {
               regex \= (\))
               styles [] = .punctuation;
            }
            : include "string";
            : include "numeric";
         }
         : inline_push {
            regex \= (\{)
            styles [] = .punctuation;
            : pop {
               regex \= (\})
               styles [] = .punctuation;
            }
            : include "body";
         }
      }
   }

   hook: context {
      : inline_push {
         regex \= (@)
         styles [] = .keyword;
         : eol_pop {}
         : pattern {
            regex \= ([a-zA-Z0-9_]+)
            styles [] = .keyword;
         }
         : pattern {
            regex \= (\.)
            styles [] = .punctuation;
         }
         : pattern {
            regex \= ([^ \t{]+)
            styles [] = .text;
         }
         : inline_push {
            regex \= (\{)
            styles [] = .punctuation;
            : pop {
               regex \= (\})
               styles [] = .punctuation;
            }
            : include "body";
         }
      }
   }

   file_list: context {
      : include "file";
      : include "string";
      : inline_push {
         regex \= (\[)
         styles [] = .punctuation;
         : pop {
            regex \= (\])
            styles [] = .punctuation;
         }
         : include "file";
         : include "string";
         : pattern {
            regex \= (,)
            styles [] = .punctuation;
         }
      }
   }

   file: context {
      : pattern {
         regex \= ([a-zA-Z0-9-_.]+)
         styles [] = .text;
      }
   }

   rule_declaration: context {
      : inline_push {
         regex \= (rule)([ \t]+)
         styles [] = .keyword, .whitespace;
         : eol_pop {}
         : inline_push {
            regex \= (\[)
            styles [] = .punctuation;
            : pop {
               regex \= (\])
               styles [] = .punctuation;
            }
            : pattern {
               regex \= ([a-zA-Z0-9_]+)
               styles [] = .variable;
            }
            : pattern {
               regex \= (,)
               styles [] = .punctuation;
            }
         }
         : inline_push {
            regex \= (\{)
            styles [] = .punctuation;
            : pop {
               regex \= (\})
               styles [] = .punctuation;
            }
            : include "body";
         }
      }
   }

   function_declaration: context {
      : inline_push {
         regex \= (func)([ \t]+)([a-zA-Z0-9_]+)
         styles [] = .keyword, .whitespace, .keyword;
         : eol_pop {}
         : inline_push {
            regex \= (\()
            styles [] = .punctuation;
            : pop {
               regex \= (\))
               styles [] = .punctuation;
            }
            : pattern {
               regex \= ([a-zA-Z0-9_]+)
               styles [] = .variable;
            }
            : pattern {
               regex \= (,)
               styles [] = .punctuation;
            }
         }
         : inline_push {
            regex \= (\{)
            styles [] = .punctuation;
            : pop {
               regex \= (\})
               styles [] = .punctuation;
            }
            : include "body";
         }
      }
   }

   function_call : context {
      : inline_push {
         regex \= ([a-zA-Z_]+)([ \t]+)
         styles[] = .keyword, .whitespace;
         : eol_pop {}
         default_style  = .text
      }
   }

   shell : context {
      : inline_push {
         regex \= (shell)([ \t]+)
         styles[] = .keyword, .whitespace;
         : eol_pop {}
         : pattern {
            regex \= (\$[^ ]+)
            styles [] = .variable;
         }
         : pattern {
            regex \= ([^\s]+)
            styles [] = .text;
         }
      }
   }

   numeric : context {
      : pattern {
         regex          \= (\b\d+)
         styles []       = .numeric;
      }
   }

   string : context {
      : inline_push {
         regex         \= (")
         styles []      = .punctuation;
         : pop {
            regex \= (")
            styles [] = .punctuation;
         }
         : pattern {
            regex      \= (\\(?:\\|"))
            styles [] = .text;
         }
         : pattern {
            regex      \= ([^"\\]+)
            styles [] = .text;
         }
      }
   }

   illegal : context {
      : pattern {
         regex          \= ([^\s])
         styles []       = .illegal;
      }
   }

   comment : context {
      : pattern {
         regex          \= (//.*)
         styles []       = .comment;
      }
   }
}
