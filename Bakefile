import (
  "github.com/AlexGustafsson/bake/stdlib/go"
  "github.com/AlexGustafsson/bake/stdlib/util"
  "github.com/AlexGustafsson/bake/stdlib/git"
)

// Always use clang, no matter if GCC is configured
env.CXX = "clang"
env.CPP = "clang"
env.CC = "clang"

// Add build-time variables
let version = "v0.1.0"
let commit = git::commit()
let go_version := go::version()
let compile_time := util::date()

let build_variables := "-X $(prefix).Version=$(version) -X $(prefix).Commit=$(commit) -X $(prefix).GoVersion=$(go_version) -X $(prefix).CompileTime=$(compile_time)"
let build_flags = "-ldflags '$(build_variables)'"

let server_source = util::find("*.go")

func version_prefix {
  shell go list ./internal/version
  return context.shell.stdout.string
}

// Generate clients etc.
// Requires openapi-generator
// `brew install openapi-generator`
func generate {
  shell {
    openapi-generator generate --package-name api --generator-name go --input-spec api.yml --output api
    # The code is not automatically formatted after generation
    gofmt -l -s -w api
  }
}

// Format Go code
func format {
  shell gofmt -l -s -w
}

// Lint Go code
func lint {
  shell golint .
}

// Vet Go code
func vet {
	shell go vet ./...
}

// Test Go code
func test {
  shell go test -v ./...
}

// Build for the native platform
"build/upmon" [...server_source, "Makefile"] {
  shell {
    go generate ./...
	  go build $(BUILD_FLAGS) -o $@ cmd/upmon.go
  }
}

alias install_tools : go::install_tools

alias build : "build/upmon"

// Build tools
alias tools ["vscode", "nano"]

// Build the vscode tool
func vscode {
  shell {
    bake --in tools/vscode
    mkdir -p build
    cp tools/vscode/bake-lsp*.vsix build
  }
}

// Copy the nanorc file to the build output
func nano {
  shell {
    mkdir -p build
	  cp tools/nano/bake.nanorc build
  }
}

func clean {
  shell rm -rf ./build &> /dev/null || true
}
