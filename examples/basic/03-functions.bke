// To help you write re-usable rules, you can use functions. Functions in Bake have
// several purposes, but if they return a rule they may be used instead of the rule body
// as shown in the previous examples. Just like with regular rules, rule-generating functions
// may receive dependencies via the rule context.
func create_file(): rule {
  shell touch $(context.out)
}

// The newly created function may now be used as a component like so:
new-file3.txt : create_file

// Functions may take parameters too.
func create_file_with_permission(chmod: number): rule {
  shell touch $(context.out) && chmod $(chmod) $(context.out)
}

// Whenever a function takes parameters, they must be specified:
new-file3.txt : create_file_with_permission(0660)

// A rule-generating function may also access dependencies, just like other rules
func copy_file(): rule {
  shell cp $(context.out) $(context.in)
}

// Dependencies for rules generated by functions are specified just like with
// regular rules
copied-file2.txt : copy_file {
  in new-file.txt
}

// Any command ran in the body of a rule generated by a function will be called
// after the commands defined in the rule created by the function.
copied-file3.txt : copy_file {
  in new-file.txt
  // List the now created file
  shell ls $@
}
